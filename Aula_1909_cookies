

Aula 19/09 Cookies
Novo projeto ‚Üí Java Web ‚Üí Aplica√ß√£o Web (Cookies) 
Excluir index.html e criar index.jsp

index.jsp

<%-- 
    Document   : index
    Created on : 22/09/2025, 10:13:49
    Author     : Tati
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>JSP Page</title>
    </head>
    <body>
         <% String valor = "Testando o uso dos cookies";
        String nomeCookie = "assinatura";
        Cookie cookie = new Cookie(nomeCookie, valor);
        cookie.setMaxAge(10); // 10 segundos
        response.addCookie(cookie);
        %>
        <a href="recebido.jsp">Mostrar o conte√∫do do Cookie</a>
    </body>
</html>
recebido.jsp

<%-- 
    Document   : recebido
    Created on : 22/09/2025, 10:15:13
    Author     : Tati
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>JSP Page</title>
    </head>
    <body>
          <% 
           String cookieName = "assinatura";
           Cookie cookies[] = request.getCookies();
           Cookie cookieLido = null;
           if (cookies != null){
               for(int x = 0; x < cookies.length; x++){
                   if (cookies[x].getName().equals(cookieName)){
                       cookieLido = cookies[x];
                       break;
                    
                   }
               }
           }
        if (cookieLido == null){
        %>
        <h1>O cookie n√£o existe mais!!!</h1>
        <%} else {
        %>
        <%="conteudo do Cookie = "+ cookieLido.getValue()%>
        <%}
        %>
    </body>
</html>


Seu c√≥digo est√° correto e funcional para o que voc√™ est√° tentando fazer: criar um cookie em uma p√°gina JSP (index.jsp) e depois ler esse cookie em outra p√°gina JSP (recebido.jsp).
Mas j√° que voc√™ mencionou no in√≠cio Servlet + JSP, talvez queira usar essa l√≥gica com um Servlet controlando a cria√ß√£o ou leitura dos cookies. Isso deixaria sua aplica√ß√£o mais organizada, com a JSP sendo apenas a camada de visualiza√ß√£o (e n√£o contendo l√≥gica Java diretamente).
________________________________________
üõ†Ô∏è Melhorando com Servlet (Boas pr√°ticas)
A l√≥gica de criar ou ler cookies deveria estar no Servlet, e a JSP s√≥ mostra os dados.
‚úÖ 1. Servlet que cria o cookie
// CriarCookieServlet.java
@WebServlet("/criar-cookie")
public class CriarCookieServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String valor = "Testando o uso dos cookies";
        String nomeCookie = "assinatura";

        Cookie cookie = new Cookie(nomeCookie, valor);
        cookie.setMaxAge(10); // 10 segundos
        response.addCookie(cookie);

        // Redireciona para a p√°gina com o link
        RequestDispatcher dispatcher = request.getRequestDispatcher("index.jsp");
        dispatcher.forward(request, response);
    }
}
‚úÖ 2. JSP (index.jsp) s√≥ com o link
<!-- index.jsp -->
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Cookie Criado</title>
</head>
<body>
    <h1>Cookie criado com sucesso!</h1>
    <a href="ler-cookie">Mostrar o conte√∫do do Cookie</a>
</body>
</html>
________________________________________
‚úÖ 3. Servlet que l√™ o cookie
// LerCookieServlet.java
@WebServlet("/ler-cookie")
public class LerCookieServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String cookieName = "assinatura";
        Cookie[] cookies = request.getCookies();
        String valor = null;

        if (cookies != null) {
            for (Cookie c : cookies) {
                if (c.getName().equals(cookieName)) {
                    valor = c.getValue();
                    break;
                }
            }
        }

        if (valor == null) {
            request.setAttribute("mensagem", "O cookie n√£o existe mais!!!");
        } else {
            request.setAttribute("mensagem", "Conte√∫do do Cookie: " + valor);
        }

        RequestDispatcher dispatcher = request.getRequestDispatcher("recebido.jsp");
        dispatcher.forward(request, response);
    }
}
________________________________________
‚úÖ 4. JSP (recebido.jsp) exibe a mensagem
<!-- recebido.jsp -->
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Cookie Recebido</title>
</head>
<body>
    <h1>${mensagem}</h1>
</body>
</html>
________________________________________
‚úÖ Vantagens dessa abordagem
‚Ä¢	Separa√ß√£o de responsabilidades: Servlet trata da l√≥gica, JSP apenas exibe.
‚Ä¢	Mais organizado e escal√°vel.
‚Ä¢	Evita scriptlets <% %>, que s√£o considerados pr√°tica ultrapassada.


üç™ O que s√£o Cookies?
Cookies s√£o pequenos arquivos (ou peda√ßos de informa√ß√£o) que o servidor web envia para o navegador do cliente (usu√°rio). Eles s√£o armazenados localmente no navegador e enviados de volta ao servidor em todas as pr√≥ximas requisi√ß√µes para aquele dom√≠nio.
________________________________________
üß† Para que servem cookies?
Cookies ajudam a manter informa√ß√µes entre requisi√ß√µes, como:
‚Ä¢	Autentica√ß√£o (login do usu√°rio)
‚Ä¢	Prefer√™ncias do usu√°rio (tema escuro/claro, idioma)
‚Ä¢	Rastreamento de sess√µes ou carrinhos de compras
‚Ä¢	Estat√≠sticas e marketing (cookies de terceiros)
________________________________________
‚öôÔ∏è Como os cookies funcionam (passo a passo)
1.	O servidor cria um cookie e envia para o navegador do usu√°rio.
2.	O navegador salva o cookie.
3.	Em cada nova requisi√ß√£o para aquele site, o navegador envia o cookie automaticamente.
4.	O servidor pode ler o cookie e agir de acordo.
________________________________________
üç¥ Exemplo no Java (Servlets ou JSP)
Criando um cookie:
Cookie cookie = new Cookie("nome", "Jo√£o");
cookie.setMaxAge(3600); // 1 hora
response.addCookie(cookie);
Isso envia o cookie para o navegador. setMaxAge() define o tempo de vida do cookie em segundos.
________________________________________
Lendo um cookie:
Cookie[] cookies = request.getCookies();
if (cookies != null) {
    for (Cookie c : cookies) {
        if (c.getName().equals("nome")) {
            String valor = c.getValue();
            // Agora voc√™ pode usar o valor
        }
    }
}
________________________________________
‚è±Ô∏è Tipos de cookies
Tipo	Explica√ß√£o
Persistente	Tem setMaxAge, e fica salvo no disco do navegador. Sobrevive ao fechar o navegador.
De sess√£o	N√£o tem setMaxAge, e s√≥ dura enquanto o navegador estiver aberto. √â apagado ao fechar.
________________________________________
üö´ Limita√ß√µes dos cookies
‚Ä¢	Tamanho limitado (~4 KB por cookie).
‚Ä¢	N√∫mero limitado por dom√≠nio (geralmente 20-50 cookies).
‚Ä¢	N√£o s√£o seguros para dados sens√≠veis, a menos que criptografados.
‚Ä¢	Podem ser desativados pelo usu√°rio.
________________________________________
üîê Seguran√ßa
‚Ä¢	Use o atributo HttpOnly para que o cookie n√£o possa ser acessado por JavaScript (evita ataques XSS).
‚Ä¢	Use o atributo Secure para que o cookie s√≥ seja enviado em conex√µes HTTPS.
Cookie c = new Cookie("token", "abc123");
c.setHttpOnly(true);
c.setSecure(true);
________________________________________
‚úÖ Quando usar cookies (boas pr√°ticas)
Use cookies quando voc√™ precisa armazenar informa√ß√µes no navegador do cliente e n√£o precisa de muito espa√ßo ou seguran√ßa extrema.
Para armazenar informa√ß√µes mais seguras ou maiores, prefira usar sess√µes no servidor (HttpSession).

